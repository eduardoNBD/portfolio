<label class="relative inline-block">
    <input type="checkbox" id="theme-toggle" class="opacity-0 peer absolute w-full h-full"/>
    <div class="peer-checked:border-amber-400 peer-checked:bg-amber-500  w-20 h-8 border-2 shadow-inner border-sky-800 bg-sky-900 rounded-full transition linear "></div>
    <span class="shadow-2xl peer-checked:right-1 absolute h-6 w-6 bg-gray-200 rounded-full top-1 ml-1 z-4">
        <span class="block shadow-inner w-5 h-5 rounded-full bg-gray-200 ml-[2px] mt-[2px] "></span>
    </span> 
    <span class="peer-checked:block hidden absolute top-1 left-1 z-2">
        <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-sun"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M12 12m-4 0a4 4 0 1 0 8 0a4 4 0 1 0 -8 0" /><path d="M3 12h1m8 -9v1m8 8h1m-9 8v1m-6.4 -15.4l.7 .7m12.1 -.7l-.7 .7m0 11.4l.7 .7m-12.1 -.7l-.7 .7" /></svg>
    </span>
    <span class="peer-checked:hidden absolute top-[5px] right-1 z-2">
        <svg  xmlns="http://www.w3.org/2000/svg"  width="22"  height="22"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-moon-stars"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M12 3c.132 0 .263 0 .393 0a7.5 7.5 0 0 0 7.92 12.446a9 9 0 1 1 -8.313 -12.454z" /><path d="M17 4a2 2 0 0 0 2 2a2 2 0 0 0 -2 2a2 2 0 0 0 -2 -2a2 2 0 0 0 2 -2" /><path d="M19 11h2m-1 -1v2" /></svg>
    </span>
</label>
<script>
    const switchTheme = document.querySelector<HTMLInputElement>("#theme-toggle");

    const getInitialTheme = (): string => {
        if (typeof window !== "undefined" && window.localStorage) {
            const storedPrefs = window.localStorage.getItem("theme");
            if (typeof storedPrefs === "string") {
                return storedPrefs;
            }

            const userMedia = window.matchMedia("(prefers-color-scheme: dark)");
            if (userMedia.matches) {
                return "dark";
            }
        }

        return "light";  
    };

    const setTheme = (theme : string) => {
        if (theme === "dark") {
            document.documentElement.classList.add("dark");
            if (switchTheme) switchTheme.checked = false;
        } else {
            document.documentElement.classList.remove("dark");
            if (switchTheme) switchTheme.checked = true;
        }
        window.localStorage.setItem("theme", theme);
    };

    const toggleTheme = (event:Event):void => {
        const target = event.target as HTMLInputElement;
        const newTheme = target.checked ? 'light' : 'dark';
        setTheme(newTheme);
    };

    document.addEventListener("DOMContentLoaded", () => {
        const initialTheme = getInitialTheme();
        setTheme(initialTheme);
 
        if (switchTheme) {
            switchTheme.addEventListener("change", toggleTheme);
        }
    });
</script>
